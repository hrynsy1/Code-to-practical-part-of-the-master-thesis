library("readxl")
library("forecast")
library("ggplot2")
library("tseries")

# ROZDZIAŁ 2

  # Rysunek 2.1
    AirPassengers.ts <- ts(AirPassengers, start = c(1949,1), frequency = 12)
    AirPassengers.ts.decom <- decompose(AirPassengers.ts, "multiplicative")
    
    plot(AirPassengers.ts.decom,col="navyblue",lwd = 2,cex.axis = 0.9)

  # Rysunek 2.2
    lag.plot(AirPassengers.ts, lags = 12, do.lines = F, main = "Wykresy rozrzutu dla szeregu AirPassengers")
    
  # Rysunek 2.3
    tsdisplay(AirPassengers.ts, main = 'Szereg czasowy AirPassengers oraz funkcje ACF i PACF')
    
# ROZDZIAŁ 3
    
  # Rysunek 3.1
    USAccDeaths.ts <- USAccDeaths
    USAccDeaths.ts[55]<-NA
    
    USAccDeaths.mean <- ts((USAccDeaths.ts[54]+USAccDeaths.ts[56])/2,start = c(1977,7),frequency = 12)
    USAccDeaths.ts.mean <- USAccDeaths.ts
    USAccDeaths.ts.mean[55]<-USAccDeaths.mean
    
    par(mfrow=c(2,1))
    plot(USAccDeaths.ts,col="navyblue",lwd = 2,ylab= "")
    title("Szereg czasowy z miesięczną agregacją")
    
    plot(USAccDeaths.ts.mean,col="navyblue",lwd = 2,ylab= "")
    lines(USAccDeaths.mean,col="red",cex=1.1,ylab= "",type='p',pch=16)
    
  # Rysunek 3.2
    par(mfrow=c(3,1))
    plot(AirPassengers.ts, ylab = "AirPassengers", xlab= "Czas",col="navyblue",lwd = 2,main="Szereg czasowy AirPassengers")
    plot(BoxCox(AirPassengers.ts, lambda = 0.5), ylab = "AirPassengers", xlab= "Czas",col="navyblue",lwd = 2,main="Transformacja pierwiastkowa (lambda=0.5)")
    plot(BoxCox(AirPassengers.ts, lambda = 0), ylab = "AirPassengers", xlab= "Czas",col="navyblue",lwd = 2,main="Transformacja logarytmiczna (lambda=0)")
    
# ROZDZIAŁ 6
    
  # Rysunek 6.1
    setwd("C:/Users/MM/Desktop/Magisterka/Mgr-projekt/Dane KNF")
    dane_składka.ERGO_MTU <- as.data.frame(read_excel("ŁĄCZNE WYNIKI.xlsx",sheet="ggplot_Dane_składka_ERGO_MTU"))
    dane_składka.ERGO_MTU[1:53,3] <- "ERGO Hestia"
    
    ggplot(data=dane_składka.ERGO_MTU, 
           aes(x=Czas, y=Składka, group = Spółka, colour = Spółka)) +
      geom_line(size=1) + 
      theme(axis.text.x = element_text(angle = 90, hjust = 1),axis.text.y = element_text(angle = 90, hjust = 1)) +
      labs(y= "Składka przypisana (mln zł.)",title = "Składka przypisana ERGO Hestii i MTU") +
      scale_y_continuous(labels=function(x) format(x/1000,  decimal.mark = ",", scientific = FALSE))+
      scale_color_manual(name="Spółki",values=c("red3", "blue"))
    
  # Rysunek 6.2
    ggplot(data=dane_składka.ERGO_MTU[54:84,], 
           aes(x=Czas, y=Składka, group = Spółka, colour = Spółka)) +
      geom_line(size=1) + 
      theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position = "none",axis.text.y = element_text(angle = 90, hjust = 1)) +
      labs(y= "Składka przypisana (mln zł.)",title = "Składka przypisana MTU") +
      scale_y_continuous(labels=function(x) format(x/1000,  decimal.mark = ",", scientific = FALSE))+
      scale_color_manual(name="Groups",values=c( "blue"))

  # Rysunek 6.3
    dane_składka_MTU <- as.data.frame(read_excel("ŁĄCZNE WYNIKI.xlsx",sheet="ggplot_Dane_MTU"))
    dane_składka_MTU_ts <- ts(dane_składka_MTU[,c(2)],start=c(2007,1),frequency=4)
    
    dni_robocze_Q <- read_excel("C:/Users/MM/Desktop/Magisterka/Mgr-projekt/dni_robocze_w_kwartałach.xlsx",sheet="2014q3 MTU")
    dni_robocze_Q.ts <- ts(dni_robocze_Q, start = c(2007,1),frequency = 4)
    srednia.liczba.dni.roboczych <- sum(dni_robocze_Q.ts)/length(dni_robocze_Q.ts) #dni robocze od 2007q1 do 2014q3

    dane_składka_MTU_ts_trading_days <- (dane_składka_MTU_ts/dni_robocze_Q.ts) * srednia.liczba.dni.roboczych
    
    ts.plot(dane_składka_MTU_ts,dane_składka_MTU_ts_trading_days,
            xlab="Czas",
            ylab="Składka przypisana (tys. zł)",
            col=c("black","red"),
            lty=c(1,2),lwd=1.9, type="l")
    title("Składka przypisana MTU - korekty kalendarzowe", adj=0)
    legend("bottomright",
           legend=c("dane oryginalne", "dane skorygowane"),
           col=c("black","red"),lty=c(1,2),lwd=1.9)
    
  # Rysunek 6.4
    MTU_dec_add <- decompose(dane_składka_MTU_ts_trading_days, type = 'additive')
    MTU_dec_mul <- decompose(dane_składka_MTU_ts_trading_days, type = 'multiplicative')
    
    MTU_addytywna <- na.omit(MTU_dec_add$random)
    MTU_multyplik.<- na.omit(MTU_dec_mul$random)
    
    par(mfrow = c(1,2),oma = c(0, 0, 1.1, 0))
    plot(MTU_addytywna,ylab=NULL,xlab=NULL,main="addytywnej")
    grid()
    plot(MTU_multyplik.,ylab=NULL,xlab=NULL,main="multiplikatywnej")
    grid()
    mtext("Reszta z szeregu po dekompozycji:", outer = T, cex = 1.5)
    
  # Tabela 6.2
    adf.test(na.omit(MTU_dec_add$random))
    adf.test(na.omit(MTU_dec_mul$random))
  
  # Transformacja Boxa-Coxa dla szeregu MTU
    dane_składka_MTU_ts_trading_days.sqrt <- BoxCox(dane_składka_MTU_ts_trading_days, lambda=0.5) #sqrt(X(t))
    dane_składka_MTU_ts_trading_days.log  <- BoxCox(dane_składka_MTU_ts_trading_days, lambda=0)   #log(X(t))
    
    MTU_lambda.auto <- BoxCox.lambda(dane_składka_MTU_ts_trading_days)
    dane_składka_MTU_ts_trading_days.auto <- BoxCox(dane_składka_MTU_ts_trading_days, lambda=MTU_lambda.auto)
    
    par(mfrow = c(3,1))
    plot(dane_składka_MTU_ts_trading_days, main="dane oryginalne")
    grid()
    plot(dane_składka_MTU_ts_trading_days.sqrt, main="transformacja pierwiastkowa lamdba=0.5")
    grid()
    plot(dane_składka_MTU_ts_trading_days.log, main="transformacja logarytmiczna lamdba=0 ")
    grid() 
    
    par(mfrow = c(2,1))
    plot(dane_składka_MTU_ts_trading_days, main="dane oryginalne")
    grid()
    plot(dane_składka_MTU_ts_trading_days.auto, main="transformacja lamdba = 0.8839871")
    grid()
    
  # Rysunek 6.5   
    par(mfrow = c(1,2),oma = c(0, 0, 1.1, 0))
    monthplot(dane_składka_MTU_ts_trading_days,col.base='red3',lty.base=1, lwd.base =2,xlab='Kwartał',ylab='Składka przypisana (tys. zł)')
    seasonplot(dane_składka_MTU_ts_trading_days,cex=0.8, col=rainbow(14), year.labels= TRUE, pch=19,main=NULL,xlab='Kwartał')
    mtext("Wykresy sezonowości dla szeregu MTU 4Q2014", outer = T, cex = 1.5)

  # Rysunek 6.6   
    lag.plot(dane_składka_MTU_ts_trading_days,main=NULL,layout = c(2,3),
             lags=6,do.lines=FALSE, pch = "X", col = "navyblue")  
   
  # Rysunek 6.7
    par(mfrow = c(1,2),oma = c(0, 0, 1.1, 0))
  
    Acf(dane_składka_MTU_ts_trading_days,lag.max=20,main="a) ACF")
    Pacf(dane_składka_MTU_ts_trading_days,lag.max=20,main="b) PACF")
    mtext("Wykresy ACF i PACF dla szeregu MTU 4Q2014", outer = T, cex = 1.5)
    
    Acf(diff(dane_składka_MTU_ts_trading_days,lag=1),lag.max=20,main="c) ACF diff=1")
    Pacf(diff(dane_składka_MTU_ts_trading_days,lag=1),lag.max=20,main="d) PACF diff=1")
    
    Acf(diff(diff(dane_składka_MTU_ts_trading_days,lag=1),lag=4),lag.max=20,main="e) ACF diff=1, diff=4")
    Pacf(diff(diff(dane_składka_MTU_ts_trading_days,lag=1),lag=4),lag.max=20,main="f) PACF diff=1, diff=4")

  # Rysunek 6.8
    decom_1  <- tslm(dane_składka_MTU_ts_trading_days~ trend)  
    decom_1s <- tslm(dane_składka_MTU_ts_trading_days~season + poly(trend, raw=TRUE, degree=1)) 
    decom_2s <- tslm(dane_składka_MTU_ts_trading_days~season + poly(trend, raw=TRUE, degree=2))  
    decom_3s <- tslm(dane_składka_MTU_ts_trading_days~season + poly(trend, raw=TRUE, degree=3))  
    decom_4s <- tslm(dane_składka_MTU_ts_trading_days~season + poly(trend, raw=TRUE, degree=4))  
    decom_5s <- tslm(dane_składka_MTU_ts_trading_days~season + poly(trend, raw=TRUE, degree=5))  
    
    par(mfrow = c(1,2),oma = c(0, 0, 1.5, 0))
    
    plot(dane_składka_MTU_ts_trading_days,main="a) Trend liniowy")
    lines(fitted(decom_1),col='red',lty=2)
    
    plot(dane_składka_MTU_ts_trading_days,main="b) Trend liniowy z sez.")
    lines(fitted(decom_1s),col='red',lty=2)
    mtext("Dekompozycja parametryczna szeregu MTU 4Q2014", outer = T, cex = 1.5)
    
    plot(dane_składka_MTU_ts_trading_days,main="c) Trend wielomianowy st. 2 z sez.")
    lines(fitted(decom_2s),col='red',lty=2)
    
    plot(dane_składka_MTU_ts_trading_days,main="d) Trend wielomianowy st. 3 z sez.")
    lines(fitted(decom_3s),col='red',lty=2)
    
    plot(dane_składka_MTU_ts_trading_days,main="e) Trend wielomianowy st. 4 z sez.")
    lines(fitted(decom_4s),col='red',lty=2)

    plot(dane_składka_MTU_ts_trading_days,main="f) Trend wielomianowy st. 5 z sez.")
    lines(fitted(decom_5s),col='red',lty=2)
    
  # Rysunek 6.9
    # Różnicowanie:
    wyniki.mtu.trading_days.diff4.diff1 <-
      ts(c(
        dane_składka_MTU_ts_trading_days.diff4.diff1,
        rep(mean(dane_składka_MTU_ts_trading_days.diff4.diff1),5)
          ),start=c(2008,2),frequency = 4)
    
    wyniki.dane_składka_MTU_ts_trading_days.diff4 <- 
      diffinv(wyniki.mtu.trading_days.diff4.diff1, xi = 17243.938)
    
    wyniki.dane_składka_MTU_ts_trading_days <- 
      diffinv(wyniki.dane_składka_MTU_ts_trading_days.diff4,
              lag=4,differences=1, 
              xi = c(53798.06,  73903.13,  72848.67,  55178.00))
    
    wyniki.dni_robocze_Q.ts <- ts(c(dni_robocze_Q.ts,62,62,62,65,63), 
                                  start = c(2007,1), frequency = 4)
    
    wyniki.dane_składka_MTU_ts <- 
      wyniki.dane_składka_MTU_ts_trading_days*wyniki.dni_robocze_Q.ts/srednia.liczba.dni.roboczych
    
    # Arima()
    MTU.model.auto<-
      Arima(dane_składka_MTU_ts,
            order = c(0,1,0),
            seasonal = list(order=c(0,1,0),period=4))
    f_arima0 <- forecast(MTU.model.auto,h=5)
    
    # Dekompozycja
    f_decom_3s<- forecast(decom_3s,h=5)
    
    wyniki_decom_korekty_kal <- f_decom_3s$mean*c(62,62,62,65,63)/srednia.liczba.dni.roboczych
    
    # Wykres
    plot(wyniki.dane_składka_MTU_ts,col='white', main="Prognozy szeregu MTU",ylab="Składka przypisana (tys. zł)",xlab="Rok")
    lines(dane_składka_MTU_ts,col='black')
    lines(ts(wyniki_decom_korekty_kal,start = c(2014,4),frequency = 4), col='red3')
    lines(ts(wyniki.dane_składka_MTU_ts[32:36],start = c(2014,4),frequency = 4),col='navyblue')
    lines(f_arima0$mean,col='darkgreen')
    
    lines(ts(wyniki_decom_korekty_kal[1],start = c(2014,4),frequency = 4), col='red3',type='p',pch=16)
    lines(ts(wyniki_decom_korekty_kal[-1],start = c(2015,1),frequency = 4), col='red3',type='p',pch=1)
    lines(ts(wyniki.dane_składka_MTU_ts[32],start = c(2014,4),frequency = 4),col='navyblue',type='p',pch=16)
    lines(ts(wyniki.dane_składka_MTU_ts[33:36],start = c(2015,1),frequency = 4),col='navyblue',type='p',pch=1)
    lines(ts(f_arima0$mean[1],start = c(2014,4),frequency = 4),col='darkgreen',type='p',pch=16)
    lines(f_arima0$mean,col='darkgreen',type='p',pch=1)
    
    legend("topleft",
           legend=c("różnicowanie", "dekompozycja par.", "f.Arima"),
           col=c("navyblue","red3","darkgreen"),pch=c(16,16,16),lty=c(1,1,1),lwd=1.9)

    # Różnica
    f_arima0$mean[1]-wyniki.dane_składka_MTU_ts[32]
    # Wynik
    wyniki.dane_składka_MTU_ts[32]
    
  # Rysunek 6.10
    dane_składka <- as.data.frame(read_excel("ŁĄCZNE WYNIKI.xlsx",sheet="Dane_składka"))
    dane_składka.ERGO <- ts(dane_składka[,c(2)],start=c(2007,1),frequency=4)
    
    # DANE ERGO DO MOMENTU PIKU
    dane_składka.ERGO.pik <- ts(dane_składka.ERGO[1:31],start = c(2007,1), frequency = 4)
    dni_robocze_Q <- read_excel("C:/Users/MM/Desktop/Magisterka/Mgr-projekt/dni_robocze_w_kwartałach.xlsx",sheet="2014q3 MTU")
    dni_robocze_Q.ts <- ts(dni_robocze_Q, start = c(2007,1),frequency = 4)
    Szereg_ERGO_4Q2014 <- dni_robocze_Q.ts # do zmiany napisów w lag.plot
    
    srednia.liczba.dni.roboczych <- sum(Szereg_ERGO_4Q2014)/length(Szereg_ERGO_4Q2014) #dni robocze od 2007q1 do 2014q3
    
    
    dane_składka.ERGO.pik_trading_days <- (dane_składka.ERGO.pik/Szereg_ERGO_4Q2014) * srednia.liczba.dni.roboczych
    
    
    par(mfrow=c(1,1))  
    ts.plot(dane_składka.ERGO.pik,dane_składka.ERGO.pik_trading_days,
            col=c("black","red"),
            xlab="Czas",
            ylab="Składka przypisana (tys. zł)",
            lty=c(1,2), type="l")
    title("Składka przypisana ERGO Hestii - korekty kalendarzowe", adj=0)
    legend("bottomright",
           legend=c("dane oryginalne", "dane skorygowane"),
           col=c("black","red"),lty=c(1,2))

  # Rysunek 6.11
    ergo_dec_add <- decompose(dane_składka.ERGO.pik_trading_days, type = 'additive')
    ergo_dec_mul <- decompose(dane_składka.ERGO.pik_trading_days, type = 'multiplicative')
    
    ergo_addytywna <- na.omit(ergo_dec_add$random)
    ergo_multyplik.<- na.omit(ergo_dec_mul$random)
    
    par(mfrow = c(1,2),oma = c(0, 0, 1.1, 0))
    plot(ergo_addytywna,ylab=NULL,xlab=NULL,main="addytywnej")
    grid()
    plot(ergo_multyplik.,ylab=NULL,xlab=NULL,main="multiplikatywnej")
    grid()
    mtext("Reszta z szeregu po dekompozycji:", outer = T, cex = 1.5)  
    
  # Tabela 6.4
    adf.test(na.omit(ergo_dec_add$random)) #Dickey-Fuller = -4.9552, Lag order = 2, p-value = 0.01 #stacj.
    adf.test(na.omit(ergo_dec_mul$random)) #Dickey-Fuller = -4.2991, Lag order = 2, p-value = 0.01252 #stacj.
    
  # Rysunek 6.12
    dane_składka.ERGO.pik_trading_days.sqrt <- BoxCox(dane_składka.ERGO.pik_trading_days, lambda=0.5) #sqrt(X(t))
    dane_składka.ERGO.pik_trading_days.log  <- BoxCox(dane_składka.ERGO.pik_trading_days, lambda=0)   #log(X(t))
    
    ERGO_pik_lambda.auto <- BoxCox.lambda(dane_składka.ERGO.pik_trading_days)
    dane_składka.ERGO.pik_trading_days.auto <- BoxCox(dane_składka.ERGO.pik_trading_days, lambda=ERGO_pik_lambda.auto)
    #transformacja dla lambdy = 0 oraz 0.5
    par(mfrow = c(3,1))
    plot(dane_składka.ERGO.pik_trading_days, main="dane oryginalne")
    grid()
    plot(dane_składka.ERGO.pik_trading_days.sqrt, main="transformacja pierwiastkowa lamdba=0.5")
    grid()
    plot(dane_składka.ERGO.pik_trading_days.log, main="transformacja logarytmiczna lamdba=0 ") # może to???
    grid()
    #transformacja dla lambdy wybranej automatycznie
    par(mfrow = c(1,1))
    plot(dane_składka.ERGO.pik_trading_days, main="Dane oryginalne",ylab="Składka przypisana")
    grid()
    plot(dane_składka.ERGO.pik_trading_days.auto, main="Transformacja Boxa-Coxa (??=-0.9999242)",ylab="Składka przypisana")
    grid()
    
  # Rysunek 6.13
    par(mfrow=c(1,2),oma = c(0, 0, 1.1, 0)) # jakie małe, w prawo, margines u góry? , w lewo?
    monthplot(dane_składka.ERGO.pik_trading_days,col.base='red3',lty.base=1, lwd.base =2,xlab='Kwartał',ylab='Składka przypisana (tys. zł)')
    seasonplot(dane_składka.ERGO.pik_trading_days,cex=0.8, col=rainbow(14), year.labels= TRUE, pch=19,main=NULL,xlab='Kwartał')
    mtext("Wykresy sezonowości dla szeregu ERGO 4Q2014", outer = TRUE,cex=1.5)
    
  # Rysunek 6.14
    par(mfrow=c(1,2),oma = c(0, 0, 1.1, 0))
    Acf(dane_składka.ERGO.pik_trading_days,lag.max=10,main="a) ACF")
    Pacf(dane_składka.ERGO.pik_trading_days,lag.max=10,main="b) PACF")
    mtext("Wykresy ACF i PACF dla szeregu ERGO_4Q2014", outer = T, cex = 1.5)
    
    Acf(diff(dane_składka.ERGO.pik_trading_days,lag=1),lag.max=10,main="c) ACF diff=1")
    Pacf(diff(dane_składka.ERGO.pik_trading_days,lag=1),lag.max=10,main="d) PACF diff=1")
    
    Acf(diff(dane_składka.ERGO.pik_trading_days,lag=4),lag.max=10,main="e) ACF diff=4")
    Pacf(diff(dane_składka.ERGO.pik_trading_days,lag=4),lag.max=10,main="f) PACF diff=4")
    
  # Zbiory testowe i treningowe (+walidacyjne)
    ERGO.train1<- window(dane_składka.ERGO.pik_trading_days, end=c(2010,4))
    ERGO.test1 <- window(dane_składka.ERGO.pik_trading_days, start=c(2011,1),end=c(2012,4))
    
    ERGO.train2 <- window(dane_składka.ERGO.pik_trading_days, end=c(2012,4))
    ERGO.test2 <- window(dane_składka.ERGO.pik_trading_days, start=c(2013,1))
    
  # Modele
    model1.ar1.ml <-
      Arima(ERGO.train1,
            order = c(0,0,0),
            seasonal = list(order=c(1,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model2.ar1.ml <-
      Arima(ERGO.train2,
            order = c(0,0,0),
            seasonal = list(order=c(1,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    
    model2.ar1.ml.d <-
      Arima(ERGO.train2,
            order = c(0,0,0),
            seasonal = list(order=c(1,1,0),period=4),
            include.drift=T,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model1.ma1.ml <-
      Arima(ERGO.train1,
            order = c(0,0,0),
            seasonal = list(order=c(0,1,1),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model2.ma1.ml <-
      Arima(ERGO.train2,
            order = c(0,0,0),
            seasonal = list(order=c(0,1,1),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model2.ma1.ml.d <-
      Arima(ERGO.train2,
            order = c(0,0,0),
            seasonal = list(order=c(0,1,1),period=4),
            include.drift=T,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model1.ma4.ml <-
      Arima(ERGO.train1,
            order = c(0,0,4),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model2.ma4.ml <-
      Arima(ERGO.train2,
            order = c(0,0,4),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    model1.ar4.ml <-
      Arima(ERGO.train1,
            order = c(4,0,0),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("ML")
      )
    
    model2.ar4.ml <-
      Arima(ERGO.train2,
            order = c(4,0,0),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML")
      )
    
    f2_2 <- forecast(model2.ar1.ml,h=7)
    f4_2 <- forecast(model2.ar1.ml.d,h=7)
    f6_2 <- forecast(model2.ma1.ml,h=7)
    f8_2 <- forecast(model2.ma1.ml.d,h=7)
    f9_2 <- forecast(model2.ma4.ml,h=7)
    f11_2 <- forecast(model2.ar4.ml,h=7)

    f2_1 <- forecast(model1.ar1.ml,h=8)
    f6_1 <- forecast(model1.ma1.ml,h=8)
    f9_1 <- forecast(model1.ma4.ml,h=8)
    f11_1 <- forecast(model1.ar4.ml,h=8)
    
  # Tabela 6.5
    kryteria <- c("MAE","RMSE","MAPE","MASE")
    
    acc.f2.test_2 <- accuracy(f2_2,ERGO.test2)[,kryteria]
    acc.f4.test_2 <- accuracy(f4_2,ERGO.test2)[,kryteria]
    acc.f6.test_2 <- accuracy(f6_2,ERGO.test2)[,kryteria]
    acc.f8.test_2 <- accuracy(f8_2,ERGO.test2)[,kryteria]
    acc.f9.test_2 <- accuracy(f9_2,ERGO.test2)[,kryteria]
    acc.f11.test_2 <- accuracy(f11_2,ERGO.test2)[,kryteria]
    
    Test.set_2 <- rbind(
        acc.f2.test_2[2,],acc.f4.test_2[2,],acc.f6.test_2[2,],acc.f8.test_2[2,],acc.f9.test_2[2,],acc.f11.test_2[2,])
    
    rownames(Test.set_2)<- c(
        'ar(1) ML','ar(1) ML dryf','ma(1) ML','ma(1) ML dryf','ma(4) ML', 'ar(4) ML')
    Test.set_2

    Training.set_2 <- rbind(
        acc.f2.test_2[1,],acc.f4.test_2[1,],acc.f6.test_2[1,],acc.f8.test_2[1,],acc.f9.test_2[1,],acc.f11.test_2[1,])
    
    rownames(Training.set_2)<- c(
        'ar(1) ML','ar(1) ML dryf','ma(1) ML','ma(1) ML dryf','ma(4) ML', 'ar(4) ML')
    Training.set_2
    
    
    zbiór.AIC_2 <-
      data.frame(c(
        model2.ar1.ml$aic,
        model2.ar1.ml.d$aic,
        model2.ma1.ml$aic,
        model2.ma1.ml.d$aic,
        model2.ma4.ml$aic,
        model2.ar4.ml$aic
        
      ))
    rownames(zbiór.AIC_2)<-
      c('ar(1) ML','ar(1) ML dryf','ma(1) ML','ma(1) ML dryf','ma(4) ML','ar(4) ML')
    colnames(zbiór.AIC_2)<- 'AIC'
    zbiór.AIC_2
    
    zbiór.BIC_2 <-
      data.frame(c(
        model2.ar1.ml$bic,
        model2.ar1.ml.d$bic,
        model2.ma1.ml$bic,
        model2.ma1.ml.d$bic,
        model2.ma4.ml$bic,
        model2.ar4.ml$bic
      ))
    rownames(zbiór.BIC_2)<-
      c('ar(1) ML','ar(1) ML dryf','ma(1) ML','ma(1) ML dryf','ma(4) ML','ar(4) ML')
    colnames(zbiór.BIC_2)<- 'BIC'
    zbiór.BIC_2
    
    zbiór.AICC_2 <-
      data.frame(c(
        model2.ar1.ml$aicc,
        model2.ar1.ml.d$aicc,
        model2.ma1.ml$aicc,
        model2.ma1.ml.d$aicc,
        model2.ma4.ml$aicc,
        model2.ar4.ml$aicc
      ))
    rownames(zbiór.AICC_2)<-c('ar(1) ML','ar(1) ML dryf','ma(1) ML','ma(1) ML dryf','ma(4) ML','ar(4) ML')
    colnames(zbiór.AICC_2)<- 'AICC'
    zbiór.AICC_2
    
    wyniki_2 <- cbind(zbiór.AIC_2,zbiór.BIC_2,zbiór.AICC_2,Training.set_2,Test.set_2)
    wyniki_2
    
  # Tabela 6.6
    model2.ma4.ml.coef <- model2.ma4.ml$coef
    model2.ma4.ml.coef.std <- sqrt(diag(model2.ma4.ml$var.coef))
    ratios3 <- model2.ma4.ml.coef/(1.96*model2.ma4.ml.coef.std)
    istotne3 <- which(abs(ratios3)>=1)
    
    model2.ar4.ml.coef <- model2.ar4.ml$coef
    model2.ar4.ml.coef.std <- sqrt(diag(model2.ar4.ml$var.coef))
    ratios4 <- model2.ar4.ml.coef/(1.96*model2.ar4.ml.coef.std)
    istotne4 <- which(abs(ratios4)>=1)
    
    ratios3
    ratios4
    
  #Utworzenie nowych modeli
    
    model3.fixed<-numeric(4)
    model4.fixed<-numeric(4)
    
    model3.fixed[istotne3]<-NA
    model4.fixed[istotne4]<-NA
    
    model3_2.subset <-
      Arima(ERGO.train2,
            order = c(0,0,4),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML"),
            fixed=model3.fixed
      )
    
    model3_1.subset <-
      Arima(ERGO.train1,
            order = c(0,0,4),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML"),
            fixed=model3.fixed
      )
    
    model4_2.subset <-
      Arima(ERGO.train2,
            order = c(4,0,0),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML"),
            fixed=model4.fixed
      )
    
    model4_1.subset <-
      Arima(ERGO.train1,
            order = c(4,0,0),
            seasonal = list(order=c(0,1,0),period=4),
            include.drift=F,
            lambda=NULL,
            method = c("CSS-ML"),
            fixed=model4.fixed
      )    
    
  # Tabela 6.7  
    f_2_ma4_ist <- forecast(model3_2.subset,h=7)
    acc.f_2_ma4_ist<- accuracy(f_2_ma4_ist,ERGO.test2)[,kryteria]
    
    f_2_ar4_ist <- forecast(model4_2.subset,h=7)
    acc.f_2_ar4_ist <- accuracy(f_2_ar4_ist,ERGO.test2)[,kryteria]

    Test.set_2_ist <- rbind(acc.f_2_ar4_ist[2,],acc.f_2_ma4_ist[2,])
    rownames(Test.set_2_ist)<- c('ar(4) ist','ma(4) ist')
    
    Training.set_2_ist <- rbind(acc.f_2_ar4_ist[1,],acc.f_2_ma4_ist[1,])
    rownames(Training.set_2_ist)<- c('ar(4) ist','ma(4) ist')
    
    zbiór.AIC_2_ist <-
      data.frame(c(
        model4_2.subset$aic,
        model3_2.subset$aic
      ))
    rownames(zbiór.AIC_2_ist)<-
      c(    'ar(4) ist','ma(4) ist')
    colnames(zbiór.AIC_2_ist)<- 'AIC'

    zbiór.BIC_2_ist <-
      data.frame(c(
        model4_2.subset$bic,
        model3_2.subset$bic
      ))
    rownames(zbiór.BIC_2_ist)<-
      c(    'ar(4) ist','ma(4) ist')
    colnames(zbiór.BIC_2_ist)<- 'BIC'
    
    zbiór.AICC_2_ist <-
      data.frame(c(
        model4_2.subset$aicc,
        model3_2.subset$aicc
      ))
    rownames(zbiór.AICC_2_ist)<-
      c(    'ar(4) ist','ma(4) ist')
    colnames(zbiór.AICC_2_ist)<- 'AICC'
    
    wyniki_2_ist <- cbind(zbiór.AIC_2_ist,zbiór.BIC_2_ist,zbiór.AICC_2_ist,Training.set_2_ist,Test.set_2_ist)
    wyniki_2_ist
    
  # Tabela 6.8
    f_1_ma4_ist <- forecast(model3_1.subset,h=8)
    acc.f_1_ma4_ist<- accuracy(f_1_ma4_ist,ERGO.test1)[,kryteria]
    
    acc.f2.test_1 <- accuracy(f2_1,ERGO.test1)[,kryteria]
    acc.f6.test_1 <- accuracy(f6_1,ERGO.test1)[,kryteria]
    acc.f11.test_1 <- accuracy(f11_1,ERGO.test1)[,kryteria]

    Test.set_1 <- rbind(acc.f2.test_1[2,],acc.f6.test_1[2,],acc.f11.test_1[2,],acc.f_1_ma4_ist[2,])
    rownames(Test.set_1)<- c('ar(1) ML','ma(1) ML','ar(4) ML','ma(4) ist')
    
    Training.set_1 <- rbind(acc.f2.test_1[1,],acc.f6.test_1[1,],acc.f11.test_1[1,],acc.f_1_ma4_ist[1,])
    rownames(Training.set_1)<- c('ar(1) ML','ma(1) ML','ar(4) ML','ma(4) ist')

    zbiór.AIC_1 <-
      data.frame(c(
        model1.ar1.ml$aic,
        model1.ma1.ml$aic,
        model1.ar4.ml$aic,
        model3_1.subset$aic
      ))
    rownames(zbiór.AIC_1)<- c('ar(1) ML','ma(1) ML','ar(4) ML','ma(4) ist')
    colnames(zbiór.AIC_1)<- 'AIC'
    
    zbiór.BIC_1 <-
      data.frame(c(
        model1.ar1.ml$bic,
        model1.ma1.ml$bic,
        model1.ar4.ml$bic,
        model3_1.subset$bic
      ))
    rownames(zbiór.BIC_1)<- c('ar(1) ML','ma(1) ML','ar(4) ML','ma(4) ist')
    colnames(zbiór.BIC_1)<- 'BIC'
    
    zbiór.AICC_1 <-
      data.frame(c(
        model1.ar1.ml$aicc,
        model1.ma1.ml$aicc,
        model1.ar4.ml$aicc,
        model3_1.subset$aicc
      ))
    rownames(zbiór.AICC_1)<- c('ar(1) ML','ma(1) ML','ar(4) ML','ma(4) ist')
    colnames(zbiór.AICC_1)<- 'AICC'
    
    wyniki_1 <- cbind(zbiór.AIC_1,zbiór.BIC_1,zbiór.AICC_1,Training.set_1,Test.set_1)
    wyniki_1

  # Rysunek 6.15
    tsdiag(model2.ar1.ml,gof.lag = 23)
    tsdiag(model2.ma1.ml,gof.lag = 23)
    tsdiag(model2.ar4.ml,gof.lag = 23)
    tsdiag(model3_2.subset,gof.lag = 23)    
    
  # Tabela 6.9
    Box.test(model2.ar1.ml$residuals,lag=1,type = "Ljung-Box")
    Box.test(model2.ar1.ml$residuals,lag=4,type = "Ljung-Box")
    Box.test(model2.ar1.ml$residuals,lag=5,type = "Ljung-Box")
    Box.test(model2.ar1.ml$residuals,lag=6,type = "Ljung-Box")
    Box.test(model2.ar1.ml$residuals,lag=7,type = "Ljung-Box")
    Box.test(model2.ar1.ml$residuals,lag=8,type = "Ljung-Box")
    
    Box.test(model2.ar1.ml$residuals,lag=1,type = "Box-Pierce")
    Box.test(model2.ar1.ml$residuals,lag=4,type = "Box-Pierce")
    Box.test(model2.ar1.ml$residuals,lag=5,type = "Box-Pierce")
    Box.test(model2.ar1.ml$residuals,lag=6,type = "Box-Pierce")
    Box.test(model2.ar1.ml$residuals,lag=7,type = "Box-Pierce")
    Box.test(model2.ar1.ml$residuals,lag=8,type = "Box-Pierce")
    
    Box.test(model2.ma1.ml$residuals,lag=1,type = "Ljung-Box")
    Box.test(model2.ma1.ml$residuals,lag=4,type = "Ljung-Box")
    Box.test(model2.ma1.ml$residuals,lag=5,type = "Ljung-Box")
    Box.test(model2.ma1.ml$residuals,lag=6,type = "Ljung-Box")
    Box.test(model2.ma1.ml$residuals,lag=7,type = "Ljung-Box")
    Box.test(model2.ma1.ml$residuals,lag=8,type = "Ljung-Box")
    
    Box.test(model2.ma1.ml$residuals,lag=1,type = "Box-Pierce")
    Box.test(model2.ma1.ml$residuals,lag=4,type = "Box-Pierce")
    Box.test(model2.ma1.ml$residuals,lag=5,type = "Box-Pierce")
    Box.test(model2.ma1.ml$residuals,lag=6,type = "Box-Pierce")
    Box.test(model2.ma1.ml$residuals,lag=7,type = "Box-Pierce")
    Box.test(model2.ma1.ml$residuals,lag=8,type = "Box-Pierce")
    
  # Tabela 6.10
    shapiro.test(model2.ar1.ml$residuals) 
    shapiro.test(model2.ma1.ml$residuals)
    shapiro.test(model2.ar4.ml$residuals)
    shapiro.test(model3_2.subset$residuals)
    
  # Rysunek 6.16
    f_ar1<- forecast(model2.ar1.ml,h=7)
    f_ma1<- forecast(model2.ma1.ml,h=7)
    f_ar4<- forecast(model2.ar4.ml,h=7)
    f_ma4<- forecast(model3_2.subset,h=7)
    
    par(mfrow = c(1,1))
    plot(f_ar1, main = 'a) ARIMA(0,0,0)(1,1,0)[4]')
    lines(ERGO.test2,col="red",lty=2)
    plot(f_ma1, main = 'b) ARIMA(0,0,0)(0,1,1)[4]')
    lines(ERGO.test2,col="red",lty=2)
    plot(f_ar4, main = 'c) ARIMA(4,0,0)(0,1,0)[4]')
    lines(ERGO.test2,col="red",lty=2)
    plot(f_ma4, main = 'd) ARIMA(0,0,4)(0,1,0)[4] ist')
    lines(ERGO.test2,col="red",lty=2)
    
  # Tabela 6.11
    f_ar1_wynik <- forecast(model2.ar1.ml,h=8)
    f_ma1_wynik <- forecast(model2.ma1.ml,h=8)
    f_ar4_wynik <- forecast(model2.ar4.ml,h=8)
    f_ma4_wynik <- forecast(model3_2.subset,h=8)
    
    f_ar1_wynik$mean[8]
    f_ma1_wynik$mean[8]
    f_ar4_wynik$mean[8]
    f_ma4_wynik$mean[8]

  # Rysunek 6.17
    pik <- 134979 + 732339
    dane_składka.ERGO.ok <-dane_składka.ERGO
    dane_składka.ERGO.ok[32] <- pik

    plot(dane_składka.ERGO,lwd=2,xlab="Rok", ylab="Składka przypisana (tys. zł)",main="Zmiana wartości odstającej w szeregu ERGO Hestia")
    lines(dane_składka.ERGO.ok-12000,col="red",lwd=2)
    lines(dane_składka.ERGO.ok-10000,col="red",type="p",pch=16,cex=0.8)    

  # Rysunek 6.18  
    dane_składka.ERGO2.2015<-window(dane_składka.ERGO,start=c(2015,1))
    
    dni_robocze_Q <- ts(read_excel("C:/Users/MM/Desktop/Magisterka/Mgr-projekt/dni_robocze_w_kwartałach2.xlsx",sheet=3), start = c(2007,1),frequency = 4)
    dni_robocze_Q2015.ts <- window(dni_robocze_Q.2, start=c(2015,1), end=c(2020,1))
    srednia.liczba.dni.roboczych <- 1318/(5*4+1)
    dane_składka.ERGO.2015_trading_days <- (dane_składka.ERGO2.2015/dni_robocze_Q2015.ts) * srednia.liczba.dni.roboczych

    ts.plot(dane_składka.ERGO2.2015,dane_składka.ERGO.2015_trading_days,
            main="Składka przypisana ERGO Hestia 2015 - korekty kalendarzowe",
            ylab="Składka przypisana (tys. zł)",
            col=c("black","red"),
            lty=c(1,2), type="l")
    legend("bottomright",
           legend=c("dane oryginalne", "dane skorygowane"),
           col=c("black","red"),lty=c(1,2))
    
  # Transformacja B-C
    ergo2015_dec_add <- decompose(dane_składka.ERGO.2015_trading_days, type = 'additive')
    ergo2015_dec_mul <- decompose(dane_składka.ERGO.2015_trading_days, type = 'multiplicative')
    
    ergo2015_addytywna <- na.omit(ergo2015_dec_add$random)
    ergo2015_multyplik.<- na.omit(ergo2015_dec_mul$random)
    
    par(mfrow = c(1,2),oma = c(0, 0, 1.1, 0))
    plot(ergo2015_addytywna,ylab=NULL,xlab=NULL,main="addytywnej")
    grid()
    plot(ergo2015_multyplik.,ylab=NULL,xlab=NULL,main="multiplikatywnej")
    grid()
    mtext("Reszta z szeregu po dekompozycji:", outer = T, cex = 1.5)  

    adf.test(na.omit(ergo2015_dec_add$random))
    adf.test(na.omit(ergo2015_dec_mul$random))

    dane_składka.ERGO.2015_trading_days.sqrt <- BoxCox(dane_składka.ERGO.2015_trading_days, lambda=0.5)
    dane_składka.ERGO.2015_trading_days.log  <- BoxCox(dane_składka.ERGO.2015_trading_days, lambda=0)
    
    par(mfrow = c(3,1))
    plot(dane_składka.ERGO.2015_trading_days, main="dane oryginalne")
    grid()
    plot(dane_składka.ERGO.2015_trading_days, main="transformacja pierwiastkowa lamdba=0.5")
    grid()
    plot(dane_składka.ERGO.2015_trading_days, main="transformacja logarytmiczna lamdba=0 ") 
    grid()

    dane_składka.ERGO.2015_trading_days.lambda  <- BoxCox(dane_składka.ERGO.2015_trading_days, lambda=BoxCox.lambda(dane_składka.ERGO.2015_trading_days))
    
    par(mfrow = c(2,1))
    plot(dane_składka.ERGO.2015_trading_days, main="dane oryginalne")
    grid()
    plot(dane_składka.ERGO.2015_trading_days.lambda, main="transformacja lamdba=-0.08939707")
    grid()
    
  # Rysunek 6.19  
    par(mfrow=c(1,2),oma = c(0, 0, 1.1, 0)) 
    monthplot(dane_składka.ERGO.2015_trading_days,col.base='red3',lty.base=1, lwd.base =2,xlab='Kwartał',ylab='Składka przypisana (tys. zł)')
    seasonplot(dane_składka.ERGO.2015_trading_days,cex=0.8, col=rainbow(14), year.labels= TRUE, pch=19,main=NULL,xlab='Kwartał')
    mtext("Wykresy sezonowości dla szeregu ERGO Hestia 2015", outer = T, cex = 1.4)

  # Rysunek 6.20
    par(mfrow=c(1,2),oma = c(0, 0, 1.1, 0))
    Acf(dane_składka.ERGO.2015_trading_days,lag.max=20,main="a) ACF")
    Pacf(dane_składka.ERGO.2015_trading_days,lag.max=20,main="b) PACF")
    mtext("Wykresy ACF i PACF dla szeregu ERGO Hestia 2015", outer = T, cex = 1.3)
    
    par(mfrow=c(1,2))
    Acf(diff(dane_składka.ERGO.2015_trading_days,lag=1),lag.max=20,main="c) ACF diff=1")
    Pacf(diff(dane_składka.ERGO.2015_trading_days,lag=1),lag.max=20,main="d) PACF diff=1")
    
    Acf(diff(dane_składka.ERGO.2015_trading_days,lag=4),lag.max=20,main="e) ACF diff=4")
    Pacf(diff(dane_składka.ERGO.2015_trading_days,lag=4),lag.max=20,main="f) PACF diff=4")
    
    Acf(diff(diff(dane_składka.ERGO.2015_trading_days,lag=4),lag=1),lag.max=20,main="g) ACF diff=1, diff=4")
    Pacf(diff(diff(dane_składka.ERGO.2015_trading_days,lag=4),lag=1),lag.max=20,main="h) PACF diff=1, diff=4")
    
    
  # Rysunek 6.21
    dni_robocze_Q.ts <- window(dni_robocze_Q, end=c(2020,1))
    srednia.liczba.dni.roboczych <- 3333/(13*4+1) #dni robocze od 2007q1 do 2020q1
    dane_składka.ERGO_trading_days <- (dane_składka.ERGO.ok/dni_robocze_Q.ts) * srednia.liczba.dni.roboczych
    
    par(mfrow=c(1,2),oma = c(0, 0, 1.1, 0))
    Acf(dane_składka.ERGO_trading_days,lag.max=20,main="a) ACF")
    Pacf(dane_składka.ERGO_trading_days,lag.max=20,main="b) PACF")
    mtext("Wykresy ACF i PACF dla szeregu ERGO Hestia", outer = T, cex = 1.3)
    
    par(mfrow=c(1,2))
    Acf(diff(dane_składka.ERGO_trading_days,lag=1),lag.max=20,main="c) ACF diff=1")
    Pacf(diff(dane_składka.ERGO_trading_days,lag=1),lag.max=20,main="d) PACF diff=1")
    
    Acf(diff(dane_składka.ERGO_trading_days,lag=4),lag.max=20,main="e) ACF diff=4")
    Pacf(diff(dane_składka.ERGO_trading_days,lag=4),lag.max=20,main="f) PACF diff=4")
    
    Acf(diff(diff(dane_składka.ERGO_trading_days,lag=4),lag=1),lag.max=20,main="g) ACF diff=1, diff=4")
    Pacf(diff(diff(dane_składka.ERGO_trading_days,lag=4),lag=1),lag.max=20,main="h) PACF diff=1, diff=4")
  
  # Tabela 6.12
    adf.test(dane_składka.ERGO.2015_trading_days)
    adf.test(diff(dane_składka.ERGO.2015_trading_days,lag=1))
    adf.test(diff(dane_składka.ERGO.2015_trading_days,lag=4))

  # Tabela 6.13
    adf.test(dane_składka.ERGO_trading_days)
    adf.test(diff(dane_składka.ERGO_trading_days,lag=1))
    adf.test(diff(dane_składka.ERGO_trading_days,lag=4))
    adf.test(diff(diff(dane_składka.ERGO_trading_days,lag=1),lag=4))
